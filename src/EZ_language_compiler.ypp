%{

#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <list>

#include "../src/global.h"	 // we start from ../obj because it's important
#include "../src/main.cpp"	 // we start from ../obj because it's important
//#include "global.h"

#define YYERROR_VERBOSE
#define USE(VALUE) /*empty*/

extern FILE* yyin;
using namespace std;

 int yyparse (void);
 extern "C" int yylex();
 extern "C" void yyerror(const std::string&);


%}


%token<numerical_value>	NOMBRE			// INTEGER
%token<reel_value>	NUMBRE				// REEL
%token<texte>	NAME					// NOM
%token	COMMA  DEGRE POURCENT DIESE POINT	// Caract√®res
%token INTEGER REAL STRING BOOLEAN			// Type of variables
%token  EGAL NE LT LE GT GE PLUS MINUS MULT DIVISE
%token	LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_ACCOLADE RIGHT_ACCOLADE LEFT_BRACKET RIGHT_BRACKET FIN backLine	// Special Characters
%token CONST  LOCAL  GLOBAL  IS  ARE 		      		      // variables declaration
%token IF DO ELSE  ENDIF 						 // if else 
%token WHEN CASE ENDCASE DEFAULT ENDWHEN				 // switch case ...
%token WHILE ENDWHILE							 // while .. do ..
%token REPEAT UNTIL ENDREPEAT 						 // do .. while ...
%token FOR IN STEP ENDFOR
%token FUNCTION PROCEDURE RETURN ENDFUNCTION ENDPROCEDURE	 // functions
%token PRINT							         // loop for

%type<reel_value> expression designator expr2 expr3 expr4  statement_sequence statement


%start ROOT
%%


ROOT:
  declarations_list statement_sequence { } 
;

NL:  // one or several new line
 backLine NL {} 
| backLine {}
;

declarations_list:
/* aucune declaration */
| declarations_list NL {} 
| declarations_list declaration_methods   {}
| declarations_list declaration_variables NL  {}
;

declaration_methods: 
   function NL { }  // NL <==> New Line
|  procedure NL { }
;

declaration_variables:
  portee NAME IS type {  printf ("declaration d'une seule variable :\n"); }
| portee NAME  noms ARE type { printf("declaration d'un ensemble des variables \n") ;}
;

function:
FUNCTION NAME LEFT_PARENTHESIS liste_argument RIGHT_PARENTHESIS RETURN type NL statement_sequence RETURN expression NL ENDFUNCTION { printf( "declaration d'une fonction \n");}
;

procedure:
PROCEDURE NAME LEFT_PARENTHESIS liste_argument RIGHT_PARENTHESIS NL statement_sequence  ENDPROCEDURE { printf( "declaration d'une procedure  \n");}
;

statement_sequence:
  statement_sequence statement NL { }
| statement NL { /*printf("  statement \n");*/ }
;

liste_argument:
 // No argument
 | NAME IS type { }
 | NAME IS type COMMA liste_argument { } 
;

statement:
| declaration_variables {} // variables declaration
| NAME EGAL expression { printf("affectation \n");} 
| PRINT expression { printf("affichage \n"); } 
| IF expression DO statement_sequence ELSE statement_sequence ENDIF { printf("SI_SINON_ALORS \n"); }
| IF expression DO statement_sequence ENDIF { printf("SI   ALORS \n"); }
| WHEN NAME IS whenbody whendefault ENDWHEN {  printf("when .. case .. \n"); }
| WHILE expression DO  statement_sequence ENDWHILE { printf("WHILE .. DO .. \n"); }
| REPEAT statement_sequence UNTIL expression ENDREPEAT { printf("REPEAT .. UNTIL .. \n"); }
| FOR NAME typeInFor IN NAME POINT POINT NAME STEP nbrOrName typeInFor DO statement_sequence ENDFOR { printf("FOR .. IN ... \n");}
;

nbrOrName:
  NOMBRE  {}
| NAME {}

portee: /* Nothing ( local by default) */ 
  LOCAL {}
| GLOBAL {}
;

type:
  INTEGER { }
| REAL   { } 
| STRING  { } 
| BOOLEAN  { }
;

noms:
  noms COMMA NAME {}
| COMMA NAME {}
;

whenbody: /* whenbody can't be empty */
  whenbody CASE expression statement_sequence ENDCASE {}  
| CASE expression statement_sequence ENDCASE {} 
;

whendefault:
DEFAULT statement_sequence ENDCASE {}
;

typeInFor: 
  /* can be empty*/
| IS  type {}
;


expression:
  expr2 { $$ = $1 ;} 
| expr2 EGAL EGAL expr2 {  }
| expr2 NE expr2 { }
| expr2 LT expr2 {  }
| expr2 LE expr2 { }
| expr2 GT expr2 { }
| expr2 GE expr2 { }
;

expr2:
  expr3 { $$ = $1 ;}
| expr2 PLUS expr3 {$$ = $1 + $3; }
| expr2 MINUS expr3 { }
;

expr3:
  expr4 { $$ = $1;}
| expr3 MULT expr4 { }
| expr3 DIVISE expr4 {  }
;

expr4:
  PLUS expr4 {    }
| MINUS expr4 { }
| LEFT_PARENTHESIS expression RIGHT_PARENTHESIS {  }
| NUMBRE {  } //reel
| NOMBRE { }  // integer
| designator { }
;

designator:
  NAME { }
;

%%

void yyerror(const std::string& mess){
    std::cout << "Error : '( "<<mess << " )'" << std::endl;
}
